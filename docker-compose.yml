version: '3.8'

services:
  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: enterprise-architect-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-enterprise_architect}
      MYSQL_USER: ${DB_USER:-ea_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-ea_password}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/sample-data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação Node.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: enterprise-architect-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-5000}:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-enterprise_architect}
      DB_USER: ${DB_USER:-ea_user}
      DB_PASSWORD: ${DB_PASSWORD:-ea_password}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      # Volume para desenvolvimento (opcional - comentar em produção)
      # - ./src:/app/src
      # - ./server.ts:/app/server.ts
      - app_logs:/app/logs

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  app_logs:
    driver: local
