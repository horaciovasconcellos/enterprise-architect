name: Build, Sign and Push Container

on:
  push:
    branches: 
      - main
      - develop
    tags: 
      - 'v*'
  pull_request:
    branches: 
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-sign:
    name: Build, Sign and Push
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write  # Necessário para keyless signing com OIDC
      attestations: write  # Para attestations

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true

      - name: ✍️ Sign the container image with GitHub OIDC
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          echo "Signing images with digest: ${DIGEST}"
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          echo "Images to sign: ${images}"
          cosign sign --yes ${images}

      - name: ✅ Verify signatures
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          for tag in ${TAGS}; do
            echo "Verifying signature for: ${tag}@${DIGEST}"
            cosign verify \
              --certificate-identity-regexp="https://github.com/${{ github.repository }}/.*" \
              --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
              "${tag}@${DIGEST}" | jq .
          done

      - name: 📊 Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: 📎 Attach SBOM to image
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}"
          cosign attest --yes --predicate sbom.spdx.json --type spdx "${IMAGE}"

      - name: 🔍 Scan image for vulnerabilities
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 📝 Create release notes
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          cat > release-notes.md << EOF
          ## 🐳 Container Image
          
          **Registry:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`
          **Digest:** \`${DIGEST}\`
          
          ### 📦 Available Tags
          
          \`\`\`
          ${TAGS}
          \`\`\`
          
          ### 🔐 Verify Signature
          
          \`\`\`bash
          cosign verify \\
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/.*" \\
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}
          \`\`\`
          
          ### 📊 Pull Image
          
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          \`\`\`
          
          ### 🚀 Run Container
          
          \`\`\`bash
          docker run -d -p 5000:5000 \\
            -e DB_HOST=mysql \\
            -e DB_NAME=enterprise_architect \\
            -e DB_USER=ea_user \\
            -e DB_PASSWORD=ea_password \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          \`\`\`
          EOF
          
          cat release-notes.md

      - name: 📤 Upload SBOM artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json
          retention-days: 90

      - name: 📤 Upload release notes
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

      - name: 📢 Summary
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          echo "## 🎉 Build and Sign Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Container Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${DIGEST}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Tags Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${TAGS}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Image signed with Cosign (keyless/OIDC)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated and attached" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Provenance attestation created" >> $GITHUB_STEP_SUMMARY
